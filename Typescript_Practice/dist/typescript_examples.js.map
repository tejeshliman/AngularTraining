{"version":3,"file":"typescript_examples.js","sourceRoot":"","sources":["file:///C:/Angular Training/AngTraining_Repo/src/typescript_examples.ts"],"names":[],"mappings":"AAAA,6BAA6B;AAC7B,mBAAmB;AACnB,MAAM;AACN,qBAAqB;AACrB,oDAAoD;AACpD,OAAO;AACP,KAAK;AAEL,sDAAsD;AACtD,6CAA6C;AAC7C,MAAM;AAEN,2EAA2E;AAE3E,+BAA+B;AAE/B,kCAAkC;AAElC,kBAAkB;AAClB,oBAAoB;AACpB,2BAA2B;AAC3B,yBAAyB;AACzB,+BAA+B;AAC/B,2BAA2B;AAC3B,eAAe;AACf,OAAO;AACP,KAAK;AAEL,qBAAqB;AACrB,iBAAiB;AACjB,2BAA2B;AAC3B,yBAAyB;AACzB,2BAA2B;AAC3B,eAAe;AACf,OAAO;AACP,KAAK;AAEL,kBAAkB;AAClB,mBAAmB;AACnB,+BAA+B;AAC/B,KAAK;AAEL,gCAAgC;AAChC,mCAAmC;AACnC,gCAAgC;AAEhC,gCAAgC;AAChC,gDAAgD;AAChD,kBAAkB;AAClB,IAAI;AAEJ,gCAAgC;AAChC,6BAA6B;AAE7B,6BAA6B;AAE7B,qBAAqB;AACrB,sBAAsB;AACtB,eAAe;AACf,gBAAgB;AAChB,wBAAwB;AACxB,OAAO;AACP,KAAK;AAEL,mCAAmC;AAEnC,+BAA+B;AAE/B,wCAAwC;AACxC,wBAAwB;AAExB,wCAAwC;AACxC,qBAAqB;AACrB,IAAI;AAEJ,+CAA+C;AAE/C,sCAAsC;AAEtC,qCAAqC;AACrC,8DAA8D;AAC9D,IAAI;AAEJ,iCAAiC;AACjC,oBAAoB;AAEpB,wCAAwC;AACxC,8DAA8D;AAC9D,IAAI;AAEJ,0CAA0C;AAC1C,2BAA2B;AAE3B,yDAAyD;AACzD,0BAA0B;AAC1B,8DAA8D;AAC9D,IAAI;AAEJ,sDAAsD;AACtD,+BAA+B;AAE/B,0BAA0B;AAE1B,uCAAuC;AAEvC,0CAA0C;AAE1C,wDAAwD;AACxD,2BAA2B;AAE3B,+DAA+D;AAC/D,kCAAkC;AAElC,2BAA2B;AAE3B,wBAAwB;AACxB,sBAAsB;AACtB,KAAK;AAEL,sCAAsC;AAEtC,6BAA6B;AAC7B,oBAAoB;AACpB,YAAY;AACZ,KAAK;AAEL,iCAAiC;AAEjC,kFAAkF;AAClF,8DAA8D;AAE9D,gDAAgD;AAEhD,8BAA8B;AAC9B,0BAA0B;AAC1B,gCAAgC;AAChC,QAAQ;AAER,+CAA+C;AAC/C,oCAAoC;AACpC,OAAO;AAEP,0CAA0C;AAC1C,wBAAwB;AACxB,gCAAgC;AAChC,UAAU;AACV,8CAA8C;AAC9C,OAAO;AAEP,iCAAiC;AACjC,gDAAgD;AAEhD,iFAAiF;AACjF,gBAAgB;AAChB,oBAAoB;AACpB,wBAAwB;AACxB,UAAU;AACV,OAAO;AACP,+DAA+D;AAC/D,6BAA6B;AAE7B,4BAA4B;AAE5B,oDAAoD;AACpD,gDAAgD;AAChD,8BAA8B;AAE9B,kDAAkD;AAClD,0CAA0C;AAC1C,OAAO;AACP,wCAAwC;AAExC,kBAAkB;AAClB,8BAA8B;AAC9B,mCAAmC;AAEnC,mEAAmE;AACnE,iCAAiC;AACjC,IAAI;AAEJ,wDAAwD;AACxD,qEAAqE;AAErE,gCAAgC;AAEhC,qCAAqC;AAErC,kBAAkB;AAClB,kCAAkC;AAElC,6CAA6C;AAC7C,+BAA+B;AAC/B,IAAI;AAEJ,gCAAgC;AAEhC,yEAAyE;AACzE,8BAA8B;AAE9B,qBAAqB;AAErB,4BAA4B;AAC5B,gDAAgD;AAChD,wBAAwB;AACxB,IAAI;AAEJ,2BAA2B;AAC3B,sCAAsC;AACtC,WAAW;AACX,4DAA4D;AAC5D,IAAI;AAEJ,sBAAsB;AACtB,wCAAwC;AAExC,cAAc;AACd,uBAAuB;AAEvB,mBAAmB;AACnB,uBAAuB;AAEvB,iBAAiB;AACjB,uBAAuB;AAEvB,gCAAgC;AAChC,yDAAyD;AACzD,6BAA6B;AAC7B,sCAAsC;AAEtC,eAAe;AACf,oCAAoC;AACpC,gDAAgD;AAChD,2BAA2B;AAC3B,IAAI;AAEJ,0BAA0B;AAC1B,4BAA4B;AAC5B,qCAAqC;AACrC,uDAAuD;AAEvD,mBAAmB;AACnB,yCAAyC;AACzC,0BAA0B;AAC1B,IAAI;AAEJ,6BAA6B;AAE7B,gEAAgE;AAChE,sCAAsC;AAEtC,+BAA+B;AAC/B,gBAAgB;AAChB,IAAI;AAEJ,oBAAoB;AACpB,eAAe;AAEf,oBAAoB;AAEpB,6EAA6E;AAC7E,2CAA2C;AAE3C,4EAA4E;AAC5E,8BAA8B;AAC9B,IAAI;AAEJ,iCAAiC;AACjC,kCAAkC;AAElC,kCAAkC;AAElC,sDAAsD;AACtD,2BAA2B;AAC3B,IAAI;AAEJ,wBAAwB;AACxB,+BAA+B;AAE/B,oBAAoB;AACpB,8DAA8D;AAE9D,8BAA8B;AAC9B,gCAAgC;AAChC,qCAAqC;AAErC,qDAAqD;AACrD,iFAAiF;AACjF,WAAW;AAEX,yDAAyD;AACzD,uDAAuD;AAEvD,8DAA8D;AAC9D,2EAA2E;AAE3E,qCAAqC;AACrC,aAAa;AACb,oBAAoB;AACpB,MAAM;AACN,cAAc;AACd,KAAK;AAEL,2DAA2D;AAC3D,qDAAqD;AACrD,eAAe;AACf,8EAA8E;AAC9E,KAAK;AAEL,uCAAuC;AACvC,0EAA0E;AAE1E,yCAAyC;AACzC,kBAAkB;AAClB,KAAK;AACL,sDAAsD;AACtD,yDAAyD;AACzD,8DAA8D;AAC9D,4DAA4D;AAE5D,iBAAiB;AACjB,oEAAoE;AACpE,eAAe;AACf,kBAAkB;AAClB,eAAe;AACf,gBAAgB;AAChB,4BAA4B;AAC5B,OAAO;AACP,KAAK;AAEL,mCAAmC;AAEnC,qCAAqC;AACrC,0EAA0E;AAC1E,yBAAyB;AACzB,eAAe;AACf,gBAAgB;AAChB,+BAA+B;AAC/B,OAAO;AACP,KAAK;AAEL,sCAAsC;AAEtC,6BAA6B;AAC7B,wBAAwB;AACxB,sBAAsB;AAEtB,qBAAqB;AACrB,6BAA6B;AAC7B,2BAA2B;AAE3B,2BAA2B;AAC3B,6CAA6C;AAC7C,2BAA2B;AAC3B,iCAAiC;AAEjC,iBAAiB;AACjB,kCAAkC;AAClC,wCAAwC;AAExC,8BAA8B;AAC9B,uCAAuC;AACvC,eAAe;AACf,KAAK;AAEL,sBAAsB;AAEtB,qBAAqB;AACrB,oDAAoD;AACpD,oDAAoD;AAEpD,wBAAwB;AACxB,yDAAyD;AAEzD,0CAA0C;AAC1C,gDAAgD;AAChD,IAAI;AAEJ,kDAAkD;AAElD,yBAAyB;AACzB,6BAA6B;AAC7B,kBAAkB;AAClB,qBAAqB;AACrB,IAAI;AAEJ,oCAAoC;AAEpC,mBAAmB;AACnB,kBAAkB;AAClB,+BAA+B;AAC/B,KAAK;AAEL,wEAAwE;AACxE,aAAa;AACb,YAAY;AACZ,aAAa;AACb,OAAO;AACP,IAAI;AAEJ,oDAAoD;AACpD,6BAA6B;AAE7B,wCAAwC;AACxC,qCAAqC;AACrC,kBAAkB;AAClB,qBAAqB;AACrB,0BAA0B;AAC1B,IAAI;AAEJ,mDAAmD;AAEnD,+DAA+D;AAC/D,aAAa;AACb,YAAY;AACZ,aAAa;AACb,mBAAmB;AACnB,2BAA2B;AAC3B,SAAS;AACT,iCAAiC;AACjC,IAAI;AAEJ,kEAAkE;AAClE,oCAAoC;AAEpC,yBAAyB;AACzB,4BAA4B;AAC5B,qBAAqB;AACrB,IAAI;AAEJ,mDAAmD;AACnD,kBAAkB;AAClB,0BAA0B;AAC1B,IAAI;AAEJ,6CAA6C;AAE7C,6EAA6E;AAC7E,aAAa;AACb,YAAY;AACZ,aAAa;AACb,mBAAmB;AACnB,2BAA2B;AAC3B,SAAS;AACT,yBAAyB;AACzB,IAAI;AAEJ,kFAAkF;AAClF,sCAAsC;AAEtC,wEAAwE;AACxE,oCAAoC;AACpC,kBAAkB;AAClB,0BAA0B;AAC1B,qBAAqB;AACrB,yBAAyB;AACzB,IAAI;AAEJ,uDAAuD;AAEvD,gDAAgD;AAChD,kBAAkB;AAClB,oBAAoB;AACpB,6BAA6B;AAC7B,aAAa;AACb,YAAY;AACZ,aAAa;AACb,mBAAmB;AACnB,2BAA2B;AAC3B,SAAS;AACT,OAAO;AACP,IAAI;AAEJ,2EAA2E;AAC3E,aAAa;AACb,MAAM;AACN,yCAAyC;AACzC,8CAA8C;AAC9C,yCAAyC;AAEzC,oCAAoC;AACpC,uCAAuC;AACvC,kBAAkB;AAClB,0BAA0B;AAC1B,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB;AACxB,IAAI;AAEJ,6DAA6D;AAE7D,gDAAgD;AAChD,kBAAkB;AAClB,oBAAoB;AACpB,gCAAgC;AAChC,aAAa;AACb,YAAY;AACZ,aAAa;AACb,mBAAmB;AACnB,2BAA2B;AAC3B,SAAS;AACT,OAAO;AACP,IAAI;AAEJ,iFAAiF;AACjF,aAAa;AACb,MAAM;AAEN,0CAA0C;AAC1C,4CAA4C;AAE5C,8BAA8B;AAE9B,qBAAqB;AACrB,kBAAkB;AAClB,6BAA6B;AAE7B,gCAAgC;AAChC,wBAAwB;AACxB,MAAM;AAEN,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AACN,IAAI;AAEJ,6DAA6D;AAC7D,qCAAqC;AAErC,4BAA4B;AAE5B,wDAAwD;AAExD,+BAA+B;AAC/B,oCAAoC;AAEpC,yCAAyC;AAEzC,4CAA4C;AAC5C,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AACN,IAAI;AAEJ,uEAAuE;AACvE,qCAAqC;AAErC,wCAAwC;AAExC,qDAAqD;AACrD,8BAA8B;AAC9B,oCAAoC;AAEpC,0CAA0C;AAC1C,IAAI;AAEJ,sEAAsE;AAEtE,iCAAiC;AAEjC,6DAA6D;AAC7D,gBAAgB;AAChB,2CAA2C;AAE3C,2BAA2B;AAC3B,yBAAyB;AACzB,MAAM;AAEN,0CAA0C;AAC1C,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,iDAAiD;AAEjD,WAAW;AACX,sCAAsC;AAEtC,WAAW;AACX,+CAA+C;AAC/C,sCAAsC;AAEtC,yBAAyB;AAEzB,yBAAyB;AACzB,2CAA2C;AAE3C,2BAA2B;AAC3B,yBAAyB;AACzB,MAAM;AAEN,0CAA0C;AAC1C,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,iDAAiD;AACjD,6BAA6B;AAE7B,iEAAiE;AACjE,oBAAoB;AACpB,MAAM;AAEN,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AACN,IAAI;AAEJ,8EAA8E;AAC9E,aAAa;AACb,aAAa;AACb,MAAM;AACN,2CAA2C;AAE3C,kCAAkC;AAClC,iDAAiD;AAEjD,sBAAsB;AACtB,gCAAgC;AAChC,2CAA2C;AAE3C,2BAA2B;AAC3B,yBAAyB;AACzB,MAAM;AAEN,0CAA0C;AAC1C,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,2DAA2D;AAC3D,6BAA6B;AAE7B,iEAAiE;AACjE,oBAAoB;AACpB,MAAM;AAEN,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AACN,IAAI;AAEJ,qDAAqD;AACrD,sEAAsE;AACtE,yCAAyC;AAEzC,gCAAgC;AAChC,+CAA+C;AAE/C,uCAAuC;AACvC,kCAAkC;AAClC,8CAA8C;AAE9C,2BAA2B;AAC3B,yBAAyB;AACzB,MAAM;AAEN,0CAA0C;AAC1C,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,0DAA0D;AAC1D,6BAA6B;AAE7B,0DAA0D;AAC1D,oBAAoB;AACpB,MAAM;AAEN,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AAEN,mCAAmC;AACnC,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,kFAAkF;AAClF,iBAAiB;AACjB,uBAAuB;AACvB,KAAK;AACL,2CAA2C;AAC3C,6CAA6C;AAE7C,kCAAkC;AAClC,iDAAiD;AAEjD,0CAA0C;AAC1C,wBAAwB;AACxB,8BAA8B;AAC9B,IAAI;AAEJ,mDAAmD;AACnD,8CAA8C;AAE9C,2BAA2B;AAC3B,yBAAyB;AACzB,MAAM;AAEN,0CAA0C;AAC1C,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,+CAA+C;AAC/C,kBAAkB;AAClB,wBAAwB;AACxB,wCAAwC;AACxC,wCAAwC;AACxC,IAAI;AAEJ,mEAAmE;AACnE,6BAA6B;AAE7B,iEAAiE;AACjE,oBAAoB;AACpB,MAAM;AAEN,mCAAmC;AACnC,mCAAmC;AACnC,MAAM;AAEN,mCAAmC;AACnC,0BAA0B;AAC1B,MAAM;AACN,IAAI;AAEJ,mEAAmE;AACnE,aAAa;AACb,aAAa;AACb,MAAM;AACN,wCAAwC;AAExC,+BAA+B;AAC/B,8CAA8C;AAE9C,kCAAkC;AAClC,kBAAkB;AAClB,qCAAqC;AAErC,yCAAyC;AACzC,+BAA+B;AAC/B,MAAM;AACN,IAAI;AAEJ,gCAAgC;AAChC,yCAAyC","sourcesContent":["// // Array function examples\r\n// const pizzas = [\r\n//   {\r\n//     name: \"Large\",\r\n//     toppings: [\"ExtraSauce\", \"Cheese\", \"Panner\"],\r\n//   },\r\n// ];\r\n\r\n// const mappedPizzas = pizzas.map((pizza, index) => {\r\n//   return pizza.name.toUpperCase() + index;\r\n// });\r\n\r\n// const refmappedPizzas = pizzas.map((pizza) => pizza.name.toUpperCase());\r\n\r\n// //console.log(mappedPizzas);\r\n\r\n// //console.log(refmappedPizzas);\r\n\r\n// const pizza = {\r\n//   name: \"Medium\",\r\n//   getName: function () {\r\n//     const self = this;\r\n//     setTimeout(function () {\r\n//       console.log(self);\r\n//     }, 100);\r\n//   },\r\n// };\r\n\r\n// const pizzaNew = {\r\n//   name: \"new\",\r\n//   getName: function () {\r\n//     setTimeout(() => {\r\n//       console.log(this);\r\n//     }, 100);\r\n//   },\r\n// };\r\n\r\n// const final = {\r\n//   name: \"Final\",\r\n//   getName: () => final.name,\r\n// };\r\n\r\n// console.log(pizza.getName());\r\n// console.log(pizzaNew.getName());\r\n// console.log(final.getName());\r\n\r\n// // Default parameter Examples\r\n// function mulltply(a: number, b: number = 2) {\r\n//   return a * b;\r\n// }\r\n\r\n// console.log(mulltply(10, 5));\r\n// console.log(mulltply(10));\r\n\r\n// // Object literal examples\r\n\r\n// const Exppizza = {\r\n//   name: \"Pepperni\",\r\n//   prize: 50,\r\n//   getName() {\r\n//     return this.name;\r\n//   },\r\n// };\r\n\r\n// console.log(Exppizza.getName());\r\n\r\n// const toppings = [\"Cheese\"];\r\n\r\n// const order = { Exppizza, toppings };\r\n// //console.log(order);\r\n\r\n// function crateOrder(a: any, b: any) {\r\n//   return { a, b };\r\n// }\r\n\r\n// console.log(crateOrder(Exppizza, toppings));\r\n\r\n// // Reduce and Rest parameters (...)\r\n\r\n// function Sumall(arr: Array<any>) {\r\n//   return arr.reduce((prev: any, next: any) => prev + next);\r\n// }\r\n\r\n// const sum = Sumall([1, 2, 3]);\r\n// console.log(sum);\r\n\r\n// function SumallWithArr(...arr: any) {\r\n//   return arr.reduce((prev: any, next: any) => prev + next);\r\n// }\r\n\r\n// const sumWithArr = SumallWithArr(1, 2);\r\n// console.log(sumWithArr);\r\n\r\n// function SumallWitDiff(message: string, ...arr: any) {\r\n//   console.log(message);\r\n//   return arr.reduce((prev: any, next: any) => prev + next);\r\n// }\r\n\r\n// const sumWithDiffPar = SumallWitDiff(\"test\", 1, 2);\r\n// console.log(sumWithDiffPar);\r\n\r\n// // Array Spred operator\r\n\r\n// const itEmpNames = [\"emp1\", \"emp2\"];\r\n\r\n// const nonitEmpNames = [\"emp3\", \"emp4\"];\r\n\r\n// const allEmpName = [...itEmpNames, ...nonitEmpNames];\r\n// console.log(allEmpName);\r\n\r\n// const allEmpNameReverse = [...nonitEmpNames, ...itEmpNames];\r\n// console.log(allEmpNameReverse);\r\n\r\n// // Object Spread Example\r\n\r\n// const mobileStore = {\r\n//   name: \"MyMobile\",\r\n// };\r\n\r\n// const brands = [\"iPhone\", \"Redmi\"];\r\n\r\n// const finalMobileStore = {\r\n//   ...mobileStore,\r\n//   brands,\r\n// };\r\n\r\n// console.log(finalMobileStore);\r\n\r\n// const mobileStoreWithObjectAssign = Object.assign({}, mobileStore, { brands });\r\n// console.log(finalMobileStore, mobileStoreWithObjectAssign);\r\n\r\n// //  Destructuring Arrays and Objects examples\r\n\r\n// // const pizzaForObject = {\r\n// //   name: \"Pepperoni\",\r\n// //   toppings: [\"pepperoni\"],\r\n// // };\r\n\r\n// // function OrderPizza({ name, toppings }) {\r\n// //   console.log(name, toppings);\r\n// // }\r\n\r\n// // function OrderPizzaWithRenameProps({\r\n// //   name: pizzaName,\r\n// //   toppings: pizzatoppings,\r\n// // }) {\r\n// //   console.log(pizzaName, pizzatoppings);\r\n// // }\r\n\r\n// // OrderPizza(pizzaForObject);\r\n// // OrderPizzaWithRenameProps(pizzaForObject);\r\n\r\n// // function OrderPizzaAsObject({ name: pizzaName, toppings: pizzatoppings }) {\r\n// //   return {\r\n// //     pizzaName,\r\n// //     pizzatoppings,\r\n// //   };\r\n// // }\r\n// // const { pizzaName } = OrderPizzaAsObject(pizzaForObject);\r\n// // console.log(pizzaName);\r\n\r\n// // // Array Destructuring\r\n\r\n// // const brandNames = [\"Iphone\", \"HTC\", \"Redmi\"];\r\n// // const [fisrt, second, third] = brandNames;\r\n// // console.log(brandNames);\r\n\r\n// // function logBrands([fisrt, second, third]) {\r\n// //   console.log(fisrt, second, third);\r\n// // }\r\n// // logBrands([fisrt, second, third]);\r\n\r\n// // Number types\r\n// let pizzaCost: number = 25;\r\n// const pizzaTopCost: number = 10;\r\n\r\n// function calculatePrize(cost: number, TopCost: number): number {\r\n//   return cost + 1.5 * TopCost;\r\n// }\r\n\r\n// const cost = calculatePrize(pizzaCost, pizzaTopCost);\r\n// const costAsnum: number = calculatePrize(pizzaCost, pizzaTopCost);\r\n\r\n// console.log(cost, costAsnum);\r\n\r\n// console.log(`Cost: ${costAsnum}`);\r\n\r\n// // String types\r\n// const test: string = \"pizza25\";\r\n\r\n// function normalize(code: string): string {\r\n//   return code.toUpperCase();\r\n// }\r\n\r\n// console.log(normalize(test));\r\n\r\n// const finaleMessage: string = `Final coupen code: ${normalize(test)}`;\r\n// console.log(finaleMessage);\r\n\r\n// // Boolean examles\r\n\r\n// const orders: number = 2;\r\n// function offerDisc(orders: number): boolean {\r\n//   return orders >= 3;\r\n// }\r\n\r\n// if (offerDisc(orders)) {\r\n//   console.log(`You have discount`);\r\n// } else {\r\n//   console.log(`add more than 3 orders to have discount`);\r\n// }\r\n\r\n// // ANy type example\r\n// let coupen; // by default type is any\r\n\r\n// coupen = 5;\r\n// console.log(coupen);\r\n\r\n// coupen = \"Test\";\r\n// console.log(coupen);\r\n\r\n// coupen = true;\r\n// console.log(coupen);\r\n\r\n// // Implicit vs Explicit Types\r\n// // Ts uses inferred types internally by default as any\r\n// let imlicictTest = \"test\";\r\n// let explicittTest: string = \"test\";\r\n\r\n// // Void type\r\n// let selectedTop: string = \"test\";\r\n// function voidexample(topping: string): void {\r\n//   selectedTop = topping;\r\n// }\r\n\r\n// voidexample(\"newTest\");\r\n// console.log(selectedTop);\r\n// //Pure function vs inpure function\r\n// // pure just retuns results and impure mutate values\r\n\r\n// // never example\r\n// function onError(err: string): never {\r\n//   throw new Error(err);\r\n// }\r\n\r\n// onError(\"Error Occureed\");\r\n\r\n// //Null, Undefined, Strict Null checks  : To make nullable var\r\n// let Cop: string | null = \"TestCop\";\r\n\r\n// function removeCop(): void {\r\n//   Cop = null;\r\n// }\r\n\r\n// console.log(Cop);\r\n// removeCop();\r\n\r\n// console.log(Cop);\r\n\r\n// // Union Types : we can use multiple types for a var using pipe | operator\r\n// let pizzaSizeAsString: string = \"small\";\r\n\r\n// function setpizzaSizeAsString(size: \"small\" | \"medium\" | \"large\"): void {\r\n//   pizzaSizeAsString = size;\r\n// }\r\n\r\n// setpizzaSizeAsString(\"large\");\r\n// console.log(pizzaSizeAsString);\r\n\r\n// let pizzaSizeAsNum: number = 1;\r\n\r\n// function setpizzaSizeAsNum(size: 1 | 2 | 3): void {\r\n//   pizzaSizeAsNum = size;\r\n// }\r\n\r\n// setpizzaSizeAsNum(3);\r\n// console.log(pizzaSizeAsNum);\r\n\r\n// // Function Types\r\n// let Sumorder: (price: number, quanitity: number) => number;\r\n\r\n// Sumorder = (x, y) => x * y;\r\n// const sumO = Sumorder(10, 2);\r\n// console.log(`Total Sum: ${sumO}`);\r\n\r\n// // Function declaration and defination on one line\r\n// let SumorderAsOnline: (price: number, quanitity: number) => number = (x, y) =>\r\n//   x * y;\r\n\r\n// const sumwithOneLineFunction = SumorderAsOnline(1, 2);\r\n// console.log(`Total Sum: ${sumwithOneLineFunction}`);\r\n\r\n// //Functions and Optional Arguments : add ? in parameter def\r\n// let SumorderwithOptional: (price: number, quanitity?: number) => number;\r\n\r\n// SumorderwithOptional = (x, y) => {\r\n//   if (y) {\r\n//     return x * y;\r\n//   }\r\n//   return x;\r\n// };\r\n\r\n// const sumorderwithOptional = SumorderwithOptional(1, 2);\r\n// const sumorderwith1parl = SumorderwithOptional(1);\r\n// console.log(\r\n//   `Total Sum: ${sumorderwithOptional}, with Optional: ${sumorderwith1parl}`\r\n// );\r\n\r\n// //Typed Functions and Default Params\r\n// let SumorderwithDefault: (price: number, quanitity?: number) => number;\r\n\r\n// SumorderwithDefault = (x, y = 10) => {\r\n//   return x * y;\r\n// };\r\n// const sumorderwithDefault = SumorderwithDefault(1);\r\n// const sumorderwithoutDef = SumorderwithDefault(15, 2);\r\n// console.log(`Total Sum by 1 para: ${sumorderwithDefault}`);\r\n// console.log(`Total Sum all para: ${sumorderwithoutDef}`);\r\n\r\n// //Object Types\r\n// let pizzaObj: { name: string; price: number; getName(): string };\r\n// pizzaObj = {\r\n//   name: \"test\",\r\n//   price: 20,\r\n//   getName() {\r\n//     return pizzaObj.name;\r\n//   },\r\n// };\r\n\r\n// console.log(pizzaObj.getName());\r\n\r\n// //Object Types as Onject on single\r\n// let pizzaOneObj: { name: string; price: number; getName(): string } = {\r\n//   name: \"pizzaOneObj\",\r\n//   price: 20,\r\n//   getName() {\r\n//     return pizzaOneObj.name;\r\n//   },\r\n// };\r\n\r\n// console.log(pizzaOneObj.getName());\r\n\r\n// //Array Types and Generics\r\n// let numArr: number[];\r\n// numArr = [1, 2, 3];\r\n\r\n// //Array as generic\r\n// let strArr: Array<string>;\r\n// strArr = [\"One\", \"two\"];\r\n\r\n// //Tuple Types for Arrays\r\n// let tuppleExp: [string, number, boolean?];\r\n// tuppleExp = [\"One\", 20];\r\n// tuppleExp = [\"One\", 20, true];\r\n\r\n// //Type Aliases\r\n// type Size = \"small\" | \"medium\";\r\n// type Callback = (size: Size) => void;\r\n\r\n// let PSize: Size = \"medium\";\r\n// const selectize: Callback = (x) => {\r\n//   PSize = x;\r\n// };\r\n\r\n// selectize(\"small\");\r\n\r\n// // Type Assertions\r\n// type pizzaType = { name: string; price: number };\r\n// const PizzaTypeExm = { name: \"test\", price: 20 };\r\n\r\n// // Serizalize as Json\r\n// const seriazlizeasJson = JSON.stringify(PizzaTypeExm);\r\n\r\n// function getNameFromJson(obj: string) {\r\n//   return (JSON.parse(obj) as pizzaType).name;\r\n// }\r\n\r\n// console.log(getNameFromJson(seriazlizeasJson));\r\n\r\n// // Creating Interfaces\r\n// interface pizzaInterface {\r\n//   name: string;\r\n//   sizes: string[];\r\n// }\r\n\r\n// let interfaceExp: pizzaInterface;\r\n\r\n// interfaceExp = {\r\n//   name: \"test\",\r\n//   sizes: [\"small\", \"large\"],\r\n// };\r\n\r\n// function CreatePizza(name: string, sizes: string[]): pizzaInterface {\r\n//   return {\r\n//     name,\r\n//     sizes,\r\n//   };\r\n// }\r\n\r\n// interfaceExp = CreatePizza(\"testnew\", [\"small\"]);\r\n// console.log(interfaceExp);\r\n\r\n// // Creating Interfaces with functions\r\n// interface pizzaInterfaceWithFunc {\r\n//   name: string;\r\n//   sizes: string[];\r\n//   getSizes(): string[];\r\n// }\r\n\r\n// let interfaceExpwithFun: pizzaInterfaceWithFunc;\r\n\r\n// function CreatePizzaWithFun(name: string, sizes: string[]) {\r\n//   return {\r\n//     name,\r\n//     sizes,\r\n//     getSizes() {\r\n//       return this.sizes;\r\n//     },\r\n//   } as pizzaInterfaceWithFunc;\r\n// }\r\n\r\n// interfaceExpwithFun = CreatePizzaWithFun(\"testnew\", [\"small\"]);\r\n// console.log(interfaceExpwithFun);\r\n\r\n// //Extending Interfaces\r\n// interface baseInterface {\r\n//   sizes: string[];\r\n// }\r\n\r\n// interface childInterface extends baseInterface {\r\n//   name: string;\r\n//   getSizes(): string[];\r\n// }\r\n\r\n// let ExtendingInterfaceExp: childInterface;\r\n\r\n// function CreatePizzaExtendingInterfaceExp(name: string, sizes: string[]) {\r\n//   return {\r\n//     name,\r\n//     sizes,\r\n//     getSizes() {\r\n//       return this.sizes;\r\n//     },\r\n//   } as childInterface;\r\n// }\r\n\r\n// ExtendingInterfaceExp = CreatePizzaExtendingInterfaceExp(\"testnew\", [\"small\"]);\r\n// console.log(ExtendingInterfaceExp);\r\n\r\n// //Interfaces and Optional Properties : toppings? declared as optional\r\n// interface OptionalPropInterface {\r\n//   name: string;\r\n//   getSizes(): string[];\r\n//   sizes: string[];\r\n//   toppings?: number[];\r\n// }\r\n\r\n// let OptionalPropInterfaceExp: OptionalPropInterface;\r\n\r\n// function CreatePizzaOptionalPropInterfaceExp(\r\n//   name: string,\r\n//   sizes: string[]\r\n// ): OptionalPropInterface {\r\n//   return {\r\n//     name,\r\n//     sizes,\r\n//     getSizes() {\r\n//       return this.sizes;\r\n//     },\r\n//   };\r\n// }\r\n\r\n// OptionalPropInterfaceExp = CreatePizzaExtendingInterfaceExp(\"testnew\", [\r\n//   \"small\",\r\n// ]);\r\n// console.log(OptionalPropInterfaceExp);\r\n// OptionalPropInterfaceExp.toppings = [1, 2];\r\n// console.log(OptionalPropInterfaceExp);\r\n\r\n// //Interfaces with IndexSignatures\r\n// interface IndexSignaturesInterface {\r\n//   name: string;\r\n//   getSizes(): string[];\r\n//   sizes: string[];\r\n//   toppings?: number[];\r\n//   [key: string]: any;\r\n// }\r\n\r\n// let IndexSignaturesInterfaceExp: IndexSignaturesInterface;\r\n\r\n// function CreatePizzaIndexSignaturesInterface(\r\n//   name: string,\r\n//   sizes: string[]\r\n// ): IndexSignaturesInterface {\r\n//   return {\r\n//     name,\r\n//     sizes,\r\n//     getSizes() {\r\n//       return this.sizes;\r\n//     },\r\n//   };\r\n// }\r\n\r\n// IndexSignaturesInterfaceExp = CreatePizzaIndexSignaturesInterface(\"testnew\", [\r\n//   \"small\",\r\n// ]);\r\n\r\n// IndexSignaturesInterfaceExp[1] = \"xyz\";\r\n// console.log(IndexSignaturesInterfaceExp);\r\n\r\n// // Classes and Constructors\r\n\r\n// class PizzaClass {\r\n//   name: string;\r\n//   toppings: string[] = [];\r\n\r\n//   constructor(name: string) {\r\n//     this.name = name;\r\n//   }\r\n\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n// }\r\n\r\n// let pizzaObjExp: PizzaClass = new PizzaClass(\"Pepponary\");\r\n// pizzaObjExp.addToppings(\"tomato\");\r\n\r\n// console.log(pizzaObjExp);\r\n\r\n// // Public and Private Members : by default are public\r\n\r\n// class PizzaClassWithAccess {\r\n//   public toppings: string[] = [];\r\n\r\n//   constructor(private name: string) {}\r\n\r\n//   //by default any var or func are public\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n// }\r\n\r\n// let PizzaClassWithAccessExp = new PizzaClassWithAccess(\"Pepponary\");\r\n// pizzaObjExp.addToppings(\"tomato\");\r\n\r\n// console.log(PizzaClassWithAccessExp);\r\n\r\n// //Readonly Members: only intialize while declaring\r\n// class PizzaClassWReadonly {\r\n//   public toppings: string[] = [];\r\n\r\n//   constructor(readonly name: string) {}\r\n// }\r\n\r\n// let PizzaClassWReadonlysExp = new PizzaClassWReadonly(\"Pepponary\");\r\n\r\n// console.log(pizzaObjExp.name);\r\n\r\n// //Setters and Getters (Accessors) : they are always public\r\n// class Sizes {\r\n//   constructor(public sizes: string[]) {}\r\n\r\n//   get AvaialbleSizes() {\r\n//     return this.sizes;\r\n//   }\r\n\r\n//   set AvaialbleSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// const sizees = new Sizes([\"small\", \"medium\"]);\r\n\r\n// //Getter\r\n// console.log(sizees.AvaialbleSizes);\r\n\r\n// //setter\r\n// sizees.AvaialbleSizes = [\"large\", \"medium\"];\r\n// console.log(sizees.AvaialbleSizes);\r\n\r\n// // Classes inheritance\r\n\r\n// class SizesBaseClass {\r\n//   constructor(public sizes: string[]) {}\r\n\r\n//   get AvaialbleSizes() {\r\n//     return this.sizes;\r\n//   }\r\n\r\n//   set AvaialbleSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// class PizzaChildClass extends SizesBaseClass {\r\n//   toppings: string[] = [];\r\n\r\n//   constructor(readonly name: string, public sizes: string[]) {\r\n//     super(sizes);\r\n//   }\r\n\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n// }\r\n\r\n// let inheritanceObjExp: PizzaChildClass = new PizzaChildClass(\"Pepponary\", [\r\n//   \"small\",\r\n//   \"large\",\r\n// ]);\r\n// inheritanceObjExp.addToppings(\"tomato\");\r\n\r\n// console.log(inheritanceObjExp);\r\n// console.log(inheritanceObjExp.AvaialbleSizes);\r\n\r\n// // Abstract Classes\r\n// abstract class abstactClass {\r\n//   constructor(public sizes: string[]) {}\r\n\r\n//   get AvaialbleSizes() {\r\n//     return this.sizes;\r\n//   }\r\n\r\n//   set AvaialbleSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// class PizzaChildabstactClassClass extends abstactClass {\r\n//   toppings: string[] = [];\r\n\r\n//   constructor(readonly name: string, public sizes: string[]) {\r\n//     super(sizes);\r\n//   }\r\n\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n// }\r\n\r\n// let abstactClassExp: PizzaChildabstactClassClass =\r\n//   new PizzaChildabstactClassClass(\"Pepponary\", [\"small\", \"large\"]);\r\n// abstactClassExp.addToppings(\"tomato\");\r\n\r\n// console.log(abstactClassExp);\r\n// console.log(abstactClassExp.AvaialbleSizes);\r\n\r\n// // Protected Members and Inheritance\r\n// abstract class ProtectedClass {\r\n//   constructor(protected sizes: string[]) {}\r\n\r\n//   get AvaialbleSizes() {\r\n//     return this.sizes;\r\n//   }\r\n\r\n//   set AvaialbleSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// class PizzaChildProtectedClass extends ProtectedClass {\r\n//   toppings: string[] = [];\r\n\r\n//   constructor(readonly name: string, sizes: string[]) {\r\n//     super(sizes);\r\n//   }\r\n\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n\r\n//   updateSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// let ProtectedClassExp: PizzaChildProtectedClass = new PizzaChildProtectedClass(\r\n//   \"Pepponary\",\r\n//   [\"small\", \"large\"]\r\n// );\r\n// ProtectedClassExp.addToppings(\"tomato\");\r\n// ProtectedClassExp.updateSizes([\"medium\"]);\r\n\r\n// console.log(ProtectedClassExp);\r\n// console.log(ProtectedClassExp.AvaialbleSizes);\r\n\r\n// //Interface contracts with “implements”\r\n// interface SizeInter {\r\n//   AvaialbleSizes: string[];\r\n// }\r\n\r\n// abstract class SizesClass implements SizeInter {\r\n//   constructor(protected sizes: string[]) {}\r\n\r\n//   get AvaialbleSizes() {\r\n//     return this.sizes;\r\n//   }\r\n\r\n//   set AvaialbleSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// interface PizzaInterface extends SizeInter {\r\n//   name: string;\r\n//   toppings: string[];\r\n//   addToppings(topping: string): void;\r\n//   updateSizes(sizes: string[]): void;\r\n// }\r\n\r\n// class PizzaCClass extends SizesClass implements PizzaInterface {\r\n//   toppings: string[] = [];\r\n\r\n//   constructor(readonly name: string, public sizes: string[]) {\r\n//     super(sizes);\r\n//   }\r\n\r\n//   addToppings(topping: string) {\r\n//     this.toppings.push(topping);\r\n//   }\r\n\r\n//   updateSizes(sizes: string[]) {\r\n//     this.sizes = sizes;\r\n//   }\r\n// }\r\n\r\n// let pizzaCClassExm: PizzaCClass = new PizzaCClass(\"Pepponary\", [\r\n//   \"small\",\r\n//   \"large\",\r\n// ]);\r\n// pizzaCClassExm.addToppings(\"tomato\");\r\n\r\n// console.log(pizzaCClassExm);\r\n// console.log(pizzaCClassExm.AvaialbleSizes);\r\n\r\n// //Static Properties and Methods\r\n// class Coupens {\r\n//   static allowed = [\"One\", \"two\"];\r\n\r\n//   static createCopuen(perce: number) {\r\n//     return `PIZZA_${perce}`;\r\n//   }\r\n// }\r\n\r\n// console.log(Coupens.allowed);\r\n// console.log(Coupens.createCopuen(10));\r\n"]}